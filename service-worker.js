"use strict";function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}var precacheConfig=[["/rising-phoenix-website/index.html","51b4e6d749974ba4cc160d7c040b6222"],["/rising-phoenix-website/static/js/main.c670855c.js","f86a19200e2e1af9bb6eb4fd9fb5af7a"],["/rising-phoenix-website/static/media/GoFundMe-Logo.aa97e18b.jpg","aa97e18b0ddd74bc153e089259d36d22"],["/rising-phoenix-website/static/media/astronomy1.fd578ccf.png","fd578ccf7ecd7f8e824f008b5ab4ae7e"],["/rising-phoenix-website/static/media/astronomy2.2a4e2ee1.png","2a4e2ee18a81b8401999745ed8d0dfa3"],["/rising-phoenix-website/static/media/astronomy3.7b21de19.png","7b21de19f79912fb11dd5ef2f8fd5f86"],["/rising-phoenix-website/static/media/astronomy4.941f142f.png","941f142f48cc5a1a4bebd4aa9930e189"],["/rising-phoenix-website/static/media/astronomy5.59df4a51.png","59df4a516835cfd7828bd5501893497b"],["/rising-phoenix-website/static/media/astronomy6.d2ba1739.png","d2ba17392ae462c1998f0e63cf64eed1"],["/rising-phoenix-website/static/media/astronomy7.60abf19e.png","60abf19e4ae1adcc642e90010aeca51f"],["/rising-phoenix-website/static/media/fire.c73bae83.png","c73bae839d611e58369531164464e99c"],["/rising-phoenix-website/static/media/nextmeeting.83561b26.jpg","83561b26c0409949121d8abf552aca22"],["/rising-phoenix-website/static/media/phoenix_stencil_filled.8608a183.png","8608a183fa137d59741cb4782d508a1a"],["/rising-phoenix-website/static/media/phoenix_stencil_unfilled.e19ca033.png","e19ca033a9de3daf5e0d8a262c359aef"],["/rising-phoenix-website/static/media/stock-image.c8859573.jpg","c88595738998f3ccd7ff7d1d7c59101a"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var n=new URL(e);return"/"===n.pathname.slice(-1)&&(n.pathname+=t),n.toString()},cleanResponse=function(e){if(!e.redirected)return Promise.resolve(e);return("body"in e?Promise.resolve(e.body):e.blob()).then(function(t){return new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})})},createCacheKey=function(e,t,n,a){var i=new URL(e);return a&&i.pathname.match(a)||(i.search+=(i.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(n)),i.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var n=new URL(t).pathname;return e.some(function(e){return n.match(e)})},stripIgnoredUrlParameters=function(e,t){var n=new URL(e);return n.hash="",n.search=n.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return t.every(function(t){return!t.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),n.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],n=e[1],a=new URL(t,self.location),i=createCacheKey(a,hashParamName,n,/\.\w{8}\./);return[a.toString(),i]}));self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(n){if(!t.has(n)){var a=new Request(n,{credentials:"same-origin"});return fetch(a).then(function(t){if(!t.ok)throw new Error("Request for "+n+" returned a response with status "+t.status);return cleanResponse(t).then(function(t){return e.put(n,t)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(n){return Promise.all(n.map(function(n){if(!t.has(n.url))return e.delete(n)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var t,n=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching),a="index.html";(t=urlsToCacheKeys.has(n))||(n=addDirectoryIndex(n,a),t=urlsToCacheKeys.has(n));var i="/rising-phoenix-website/index.html";!t&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(n=new URL(i,self.location).toString(),t=urlsToCacheKeys.has(n)),t&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(n)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(t){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)}))}});